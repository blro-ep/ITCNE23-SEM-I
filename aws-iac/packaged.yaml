Description: This template deploys a VPC, with a pair of public and private subnets
  spread across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets. **WARNING** This template creates
  AWS resources. You will be billed for the AWS resources used if you create a stack
  from this template. supporting resources, a basic networking structure, and some
  Security groups for use in later tasks.
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: VPC-DEV01
  NatGateways:
    Description: Do you want to add Nat Gateway per private Subnet? **There are costs
      associated to this Resource**
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  S3Endpoint:
    Description: Do you want to add a S3 endpoint to VPC
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  FlowLog:
    Description: Do you want to Enable VPC Flow Log?
    Type: String
    Default: reject-only
    AllowedValues:
    - true
    - reject-only
    - false
  FlowLogRetentionDays:
    Description: The number of days you want to retain flow log events
    Type: Number
    Default: 5
    AllowedValues:
    - 1
    - 3
    - 5
    - 7
    - 14
    - 30
    - 60
    - 90
    - 120
    - 150
  s3Bucket:
    Description: Do you want to create a s3 Bucket?
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  SimpleEc2Instance:
    Description: Do you want to add a Simple EC2 Instance to your VPC
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  SimpleEc3Instance:
    Description: Do you want to add a Simple EC2 3 Instance with a PHP Website and
      SSM connection to your VPC
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  EnvType:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: test
    AllowedValues:
    - test
    - prod
    ConstraintDescription: Specify either test or prod.
  KeyPairName:
    Description: Enter a Public/private key pair. If you do not have one in this AWS
      Region, create it before continuing
    Type: AWS::EC2::KeyPair::KeyName
    Default: gmail
  IAM:
    Description: Specify if IAM Resources should be created.
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  MonitoringGroup:
    Description: Specify the Monitoring User Name.
    Type: String
    Default: MonitoringGroup
  MonitoringUser:
    Description: Specify the Monitoring User Name.
    Type: String
    Default: Monitoring
  VpcCIDR:
    Description: Please enter the IP range for this VPC
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.42.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range for the public subnet in the first Availability
      Zone
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range for the public subnet in the second Availability
      Zone
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.11.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability
      Zone
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.20.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range for the private subnet in the second Availability
      Zone
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.21.0/24
  PrivateSubnet3CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability
      Zone
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.30.0/24
  PrivateSubnet4CIDR:
    Description: Please enter the IP range for the private subnet in the second Availability
      Zone
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.31.0/24
Conditions:
  WantIAM:
    Fn::Equals:
    - Ref: IAM
    - true
  Wants3Bucket:
    Fn::Equals:
    - Ref: s3Bucket
    - true
  WantNatGateways:
    Fn::Equals:
    - Ref: NatGateways
    - true
  WantS3Endpoint:
    Fn::Equals:
    - Ref: S3Endpoint
    - true
  WantFlowLog:
    Fn::Not:
    - Fn::Equals:
      - Ref: FlowLog
      - false
  WantFlowLogRejectOnly:
    Fn::Equals:
    - Ref: FlowLog
    - reject-only
  WantEC2:
    Fn::Equals:
    - Ref: SimpleEc2Instance
    - true
  WantEC3:
    Fn::Equals:
    - Ref: SimpleEc3Instance
    - true
  WantProduction:
    Fn::Equals:
    - Ref: EnvType
    - prod
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        Fn::Sub: ${EnvironmentName}.internal
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} stack DHCPOptions
      - Key: StackName
        Value:
          Ref: EnvironmentName
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: VPC
      DhcpOptionsId:
        Ref: DHCPOptions
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Subnet (AZ2)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Subnet 1 (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Subnet 2 (AZ2)
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Subnet 3 (AZ1)
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Subnet 4 (AZ2)
  VPCNatGateways:
    Condition: WantNatGateways
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.eu-central-2.amazonaws.com/devdeploysemzh/d4b68337cea90add2efddb13cd91e7cd.template
      Parameters:
        Subnet1Nat:
          Ref: PublicSubnet1
        Subnet2Nat:
          Ref: PublicSubnet2
        PrivateRouteTable1Nat:
          Ref: PrivateRouteTable1
        PrivateRouteTable2Nat:
          Ref: PrivateRouteTable2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Route 1 (AZ1)
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Route 3 (AZ1)
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      SubnetId:
        Ref: PrivateSubnet1
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable3
      SubnetId:
        Ref: PrivateSubnet3
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Route 2 (AZ2)
  PrivateRouteTable4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvironmentName} Private Route 4 (AZ2)
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      SubnetId:
        Ref: PrivateSubnet2
  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable4
      SubnetId:
        Ref: PrivateSubnet4
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: no-ingress-sg
      GroupDescription: Security group with no ingress rule
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: NoIngressSecurityGroup
  PingIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ping-ingress-sg
      GroupDescription: Security group with SSH und Ping ingress rule
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: PingIngressSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
  SSMEndpointsSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for VPC endpoints SSM / EC2 Messages
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: SSMEndpointsSg
      SecurityGroupIngress:
      - Description: allow inbound HTTPS from the VPC
        CidrIp:
          Ref: VpcCIDR
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      SecurityGroupEgress:
      - Description: allow outbound HTTPS to the VPC
        CidrIp:
          Ref: VpcCIDR
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
  PubTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS and SSH In and Out bound traffic
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: PubTierSG
      SecurityGroupIngress:
      - Description: allow inbound HTTP from instance
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      - Description: allow inbound HTTPS from instance
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      - Description: allow Node Exporter from instance
        FromPort: 9100
        ToPort: 9100
        IpProtocol: tcp
        CidrIp:
          Ref: VpcCIDR
  PubTierSGIngressicmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Inbound Rule between App Tier and Web Tier
      GroupId:
        Ref: PubTierSG
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId:
        Ref: AppTierSG
  AppTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS, SSH and Ping In and Out bound traffic
      GroupName: ApplicationTier SG
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: AppTierSG
      SecurityGroupIngress:
      - Description: allow Node Exporter from instance
        FromPort: 9100
        ToPort: 9100
        IpProtocol: tcp
        CidrIp:
          Ref: VpcCIDR
  AppTierSGIngressPort80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group HTTP Inbound Rule between App Tier and Web Tier
      GroupId:
        Ref: AppTierSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Ref: PubTierSG
  AppTierSGIngressPort443:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group HTTPS Inbound Rule between App Tier and Web Tier
      GroupId:
        Ref: AppTierSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId:
        Ref: PubTierSG
  AppTierSGIngressPort22:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Inbound Rule between App Tier and Web Tier
      GroupId:
        Ref: AppTierSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Ref: PubTierSG
  AppTierSGIngressicmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Inbound Rule between App Tier and Web Tier
      GroupId:
        Ref: AppTierSG
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId:
        Ref: PubTierSG
  DBTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH In and Out bound traffic from and to AppTierSG
      GroupName: Database Tier Secuirty Group
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: DBTierSG
      SecurityGroupIngress:
      - Description: Allow SSH
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId:
          Ref: AppTierSG
      - Description: allow Node Exporter from instance
        FromPort: 9100
        ToPort: 9100
        IpProtocol: tcp
        CidrIp:
          Ref: VpcCIDR
  Ec2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
  DevInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: Ec2SSMRole
  PubNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Public-Tier-ACL
  PubNACLInboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      PortRange:
        From: 22
        To: 22
  PubNACLInboundRulePort22PrivateSubnet2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      PortRange:
        From: 22
        To: 22
  PubNACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 110
      Protocol: 1
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      Icmp:
        Code: -1
        Type: 8
  PubNACLInboundRuleICMPEchoPrivateSubnet2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 111
      Protocol: 1
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      Icmp:
        Code: -1
        Type: 8
  PubNACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  PubNACLInboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  PubNACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 140
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  PubNACLInboundRulePort9090:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 9090
        To: 9090
  PubNACLInboundRulePort3000:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 160
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3000
        To: 3000
  PubNACLInboundRulePort9115:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 170
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 9115
        To: 9115
  PubNACLInboundRulePort9093:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 180
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 9093
        To: 9093
  PubNACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  PubNACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 100
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      PortRange:
        From: 22
        To: 22
  PubNACLOutboundRulePort22PrivateSubnet2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 101
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      PortRange:
        From: 22
        To: 22
  PubNACLOutboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 110
      Protocol: 1
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      Icmp:
        Code: -1
        Type: 8
  PubNACLOutboundRuleICMPEcho2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 111
      Protocol: 1
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      Icmp:
        Code: -1
        Type: 8
  PubNACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  PubNACLOutboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 130
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  PubNACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 140
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  PubNACLOutboundRulePort9090:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 9090
        To: 9090
  PubNACLOutboundRulePort3000:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 160
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3000
        To: 3000
  PubNACLOutboundRulePort9115:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 170
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 9115
        To: 9115
  PubNACLOutboundRulePort9093:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 180
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 9093
        To: 9093
  PubNACLOutboundRulePortPort587:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 190
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 587
        To: 587
  PubNACLOutboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PubNACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PubNACL
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PubNACL
  Private1NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Private1-Tier-ACL-AZ1
  Private1NACLInboundRule80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet1CIDR
      PortRange:
        From: 80
        To: 80
  Private1NACLInboundRule22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet1CIDR
      PortRange:
        From: 22
        To: 22
  Private1NACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 120
      Protocol: 1
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet1CIDR
      Icmp:
        Code: -1
        Type: 8
  Private1NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  Private1NACLInboundRulePort80public:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 140
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  Private1NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private1NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  Private1NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 110
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet1CIDR
      PortRange:
        From: 22
        To: 22
  Private1NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 120
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  Private1NACLOutboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 130
      Protocol: 1
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet1CIDR
      Icmp:
        Code: -1
        Type: 8
  Private1NACLOutboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 140
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  Private1NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 150
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private1NACLOutboundRulePort587:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 160
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 587
        To: 587
  Private1NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private1NACL
      RuleNumber: 200
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: Private1NACL
  Private2NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Private2-Tier-NACL-AZ2
  Private2ACLInboundRulePort20:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet2CIDR
      PortRange:
        From: 22
        To: 22
  Private2NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  Private2NACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 130
      Protocol: 1
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet2CIDR
      Icmp:
        Code: -1
        Type: 8
  Private2NACLInboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 140
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  Private2NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private2NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  Private2NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 110
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet2CIDR
      PortRange:
        From: 22
        To: 22
  Private2NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 120
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  Private2NACLOutboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 130
      Protocol: 1
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet2CIDR
      Icmp:
        Code: -1
        Type: 8
  Private2NACLOutboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 140
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  Private2NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 150
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private2NACLOutboundRulePort587:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 160
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 587
        To: 587
  Private2NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private2NACL
      RuleNumber: 200
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      NetworkAclId:
        Ref: Private2NACL
  Private3NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Private3-Tier-ACL-AZ1
  Private3NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private3NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  Private3ACLInboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      PortRange:
        From: 22
        To: 22
  Private3NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  Private3NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 100
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private3NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 110
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  Private3NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 120
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      PortRange:
        From: 22
        To: 22
  Private3NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private3NACL
      RuleNumber: 130
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      NetworkAclId:
        Ref: Private3NACL
  Private4NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Private4-Tier-ACL-AZ1
  Private4NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private4NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  Private4ACLInboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      PortRange:
        From: 22
        To: 22
  Private4NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 130
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  Private4NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 100
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  Private4NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 110
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  Private4NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 120
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: PublicSubnet2CIDR
      PortRange:
        From: 22
        To: 22
  Private4NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Private4NACL
      RuleNumber: 130
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Ref: VpcCIDR
      PortRange:
        From: 9100
        To: 9100
  PrivateSubnet4NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet4
      NetworkAclId:
        Ref: Private4NACL
  NewKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: MyKeyPair
  VPCEndpointS3:
    Condition: WantS3Endpoint
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
      - Ref: PrivateRouteTable1
      - Ref: PrivateRouteTable2
      - Ref: PrivateRouteTable3
      - Ref: PrivateRouteTable4
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: VPC
  EC2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ec2messages
      VpcId:
        Ref: VPC
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroupIds:
      - Ref: SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
  SSMMessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ssmmessages
      VpcId:
        Ref: VPC
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroupIds:
      - Ref: SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
  SSMVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ssm
      VpcId:
        Ref: VPC
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroupIds:
      - Ref: SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: public-bucket-dam
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
      - Key: Name
        Value:
          Ref: EnvironmentName
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - s3:GetObject
          - s3:PutObject
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - Fn::GetAtt:
                - S3Bucket
                - Arn
              - /*
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
        - Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - Fn::GetAtt:
                - S3Bucket
                - Arn
              - /*
  s3BucketModule:
    Type: AWS::CloudFormation::Stack
    Condition: Wants3Bucket
    DependsOn: IAMUsers
    Properties:
      Parameters:
        s3BucketfirstName: dam-private-bucket-fwakjjhjjh
        ValueEnvironment:
          Ref: EnvironmentName
      TemplateURL: https://s3.eu-central-2.amazonaws.com/devdeploysemzh/b72f4b62b64d0605a54e3bf476fc405c.template
  FlowLogModule:
    Condition: WantFlowLog
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.eu-central-2.amazonaws.com/devdeploysemzh/97a0a707aafb361773bba87a95ef03bc.template
      Parameters:
        VPCModule:
          Ref: AWS::StackName
        TrafficType:
          Fn::If:
          - WantFlowLogRejectOnly
          - REJECT
          - ALL
        RetentionDays:
          Ref: FlowLogRetentionDays
        VPCID:
          Ref: VPC
  VPCBASICInstance:
    Condition: WantEC2
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.eu-central-2.amazonaws.com/devdeploysemzh/c535450983bb036841c4a53e4cfceec7.template
      Parameters:
        VPCModule:
          Ref: AWS::StackName
        VPCID:
          Ref: VPC
        MyNewKeyPair:
          Ref: KeyPairName
        Subnet4ec2:
          Ref: PrivateSubnet2
        InstanceType:
          Fn::If:
          - WantProduction
          - t3.small
          - t3.micro
        DevInstanceProfile:
          Ref: DevInstanceProfile
        AvailabilityZone:
          Fn::GetAtt:
          - PrivateSubnet2
          - AvailabilityZone
        SecurityGroup:
          Ref: AppTierSG
  VPCDEVInstance:
    Condition: WantEC3
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.eu-central-2.amazonaws.com/devdeploysemzh/f38ef6d97f3802736573b045bcc58215.template
      Parameters:
        VPCModule:
          Ref: AWS::StackName
        VPCID:
          Ref: VPC
        MyNewKeyPair:
          Ref: KeyPairName
        Subnet4ec2:
          Ref: PublicSubnet2
        InstanceType:
          Fn::If:
          - WantProduction
          - t3.medium
          - t3.small
        DevInstanceProfile:
          Ref: DevInstanceProfile
        DevInstanceSecurityGrp:
          Ref: PubTierSG
        IPEc2Instance:
          Fn::GetAtt:
          - VPCBASICInstance
          - Outputs.PrivateIpAddress
        DevInstanceID:
          Fn::GetAtt:
          - VPCBASICInstance
          - Outputs.InstanceID
        AvailabilityZone:
          Fn::GetAtt:
          - PublicSubnet2
          - AvailabilityZone
  IAMUsers:
    Type: AWS::CloudFormation::Stack
    DependsOn: IAMMonitoringGroup
    Condition: WantIAM
    Properties:
      TemplateURL: https://s3.eu-central-2.amazonaws.com/devdeploysemzh/409d44ff190c0176d9b5ec3ddb880872.template
      Parameters:
        UserName:
          Ref: MonitoringUser
        UserPassword: ABc123456789$
        Groups:
          Ref: MonitoringGroup
        TagValue:
          Fn::Sub: ${EnvironmentName}-Monitoring-User
  IAMMonitoringGroup:
    Type: AWS::CloudFormation::Stack
    Condition: WantIAM
    Properties:
      TemplateURL: https://s3.eu-central-2.amazonaws.com/devdeploysemzh/6d36c385695b7e398199ce8c07396b39.template
      Parameters:
        GroupName:
          Ref: MonitoringGroup
Outputs:
  VPCID:
    Description: A reference to the created VPC
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ID
  VPCID2:
    Description: A reference to the created VPC
    Value:
      Ref: VPC
    Export:
      Name: VPC2ID
  StackName:
    Description: The Name of the Stack we gave @ the Parameter --stack-name VPC-DEV01
    Value:
      Ref: AWS::StackName
    Export:
      Name: StackName
  Region:
    Description: Lab Region
    Value:
      Ref: AWS::Region
  DevInstanceSecurityGrp:
    Value:
      Ref: AppTierSG
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AppTierSG
  VpcCIDR:
    Description: A reference to the VPC CIDR
    Value:
      Ref: VpcCIDR
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VpcCIDR
  PublicSubnets:
    Description: A list of the public subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: PublicSubnet1
        - Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnets
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet2
  PublicSubnet2AZ:
    Description: A reference to the public subnet2 Availability Zone
    Value:
      Fn::GetAtt:
      - PublicSubnet2
      - AvailabilityZone
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AZofPublicSubnet2
  PrivateSubnets:
    Description: A list of the private subnets
    Value:
      Fn::Join:
      - ','
      - - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
        - Ref: PrivateSubnet4
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnets
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet2
  PrivateSubnet3:
    Description: A reference to the DB private subnet in the 1nd Availability Zone
    Value:
      Ref: PrivateSubnet3
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet3
  PrivateSubnet4:
    Description: A reference to the private DB subnet in the 2nd Availability Zone
    Value:
      Ref: PrivateSubnet4
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet4
  PubNACL:
    Description: A reference to the public subnet NACL for both Availability Zone
    Value:
      Ref: PubNACL
  Private1NACL:
    Description: A reference to the private subnet NACL in the 1st Availability Zone
    Value:
      Ref: Private1NACL
  Private2NACL:
    Description: A reference to the private subnet NACL in the 2st Availability Zone
    Value:
      Ref: Private2NACL
  NoIngressSecurityGroupID:
    Description: Security group with no ingress rule
    Value:
      Ref: NoIngressSecurityGroup
  DevInstanceProfile:
    Description: Security group with no ingress rule
    Value:
      Ref: DevInstanceProfile
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DevInstanceProfile
  IPEc2InstanceID:
    Condition: WantEC2
    Description: The Public IP Address of the Ec2 Template
    Value:
      Fn::GetAtt:
      - VPCBASICInstance
      - Outputs.PrivateIpAddress
  S3Bucket:
    Description: Bucket Created using this template.
    Value:
      Ref: S3Bucket
