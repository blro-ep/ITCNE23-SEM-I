AWSTemplateFormatVersion: 2010-09-09

Description: Deploys a development Amazon Linux instance with an extra EBS Volume of 4GB and a PHP Website with instructions to connect to it over SSM 

# Parameter given to the script
Parameters:
  VPCModule:
    Type: String
    Description: A reference to the main VPC Stack Name that contains the basic resources
    MinLength: 1
    MaxLength: 16
    Default: VPC-DEV01
  
  OS:
    Description: Operation System to use
    Type: String
    Default: Ubuntu22
    AllowedValues: [Ubuntu22, Ubuntu20, Amazon]
    ConstraintDescription: must be Ubuntu22, Ubuntu20,or Amazon.
  # 
  EnvType:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: test
    AllowedValues: [test, prod]
    ConstraintDescription: Specify either test or productiv.

  PublicKey4SSH:
    Type: String
    Description: Attach your SSH Public Key to connect to the Instance directly without a password
    Default: 'AAAAB3NzaC1yc2EAAAADAQABAAABgQCtklPoEQHGiUSE8Fm/+HKd6eluz4WoRjukSJmeMsZhduukkQwMJHpMfdxGtde/VKSF2dJByW4pumy8J7X02t4xWGk3gI6DzTKLJyDSk39HuqBAuIsM4wJrhnDNiPssdq2FVA5olB+OFJhD8HVgM+PNrhmVA3OwPnMls23mGV+rtxS9mgBbzgk+Cbzz5QUZ57zvcRiDi+KrfeLTyExm/kk74IKV0NZU8xdDiwAgHf8+s30eYudUFpRZZ3D3k1Jq2QGzlsBw7WdjkhOW9MfsKYnIeFA4LCNIttJKasaGTPVUQray+px6zcRr7mdKAdxrl+CTq1R1TpQCiQjUbuTK/F2KX6my+8f++GGs7Emq7Jiiow2sURrlOJFEWCzkhszl2/aiM2+zwlZ0vy4azP22kVxqxDGexHPuOgNg8mzVXLes6wlVdxlDRb1KXviQ7H/q7AJTeYZ1UypVa5xHigFQnITkXIr3d3jkes/Wr6ZsxiJLRYO2uMDsVTLthd0jg1E3l8c= CORPROOT+TAAAMDA6@SWP-R914T5M0'

  KeyPairName:
    Description: >-
      Enter a Public/private key pair. If you do not have one in this AWS Region,
      create it before continuing
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: gmail

# The Mappings section defines the AMI IDs (unique identifiers for Amazon Machine Images) for each region and instance type. in eu-centeral-1 and eu-central-2
Mappings:
  AMIMap:
    eu-central-1:
      Ubuntu22: ami-04e601abe3e1a910f
      Ubuntu20: ami-0d497a49e7d359666
      Amazon: ami-0b7fd829e7758b06d
    eu-central-2:
      Ubuntu22: ami-04dbb668869bef978
      Ubuntu20: ami-04fe12af5cb123aec
      Amazon: ami-0a2877e34c231859d

Conditions:
  # The condition will be true if the value of the EnvType is prod / different way of writing a condition
  WantProduction: !Equals
    - !Ref EnvType
    - prod

Resources:

# Secuirty Group 
#################

# Creates security group for prod EFS.
  EFSSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "security group for the prod EFS"
      GroupName: "EFS-SG"
      VpcId:
        !ImportValue 
          Fn::Sub: '${VPCModule}-ID'
      SecurityGroupIngress: 
        - 
          SourceSecurityGroupId: !Ref GrafanaSecurityGrp
          Description: "servers to connect to efs"
          FromPort: 2049
          IpProtocol: "tcp"
          ToPort: 2049
      Tags:
        - Key: Environment
          Value: Monitoring
        - Key: StackName
          Value: !Ref AWS::StackName


# Secuirty Group for Load Balancer Allows HTTP and Grafana In 
  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web instances
      GroupName: WebTierSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9115
          ToPort: 9115
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9093
          ToPort: 9093
          CidrIp: 0.0.0.0/0
      VpcId:
        !ImportValue 
          Fn::Sub: '${VPCModule}-ID'
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

# Outbound Rule
##############

# Outbound rule in a security group to allow TCP traffic on port 80 from the security group "GrafanaSecurityGrp" to the security group "WebTierSecurityGroup". And is written seperate to eliminate problems with circular dependencies!
  OutboundRule80:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Security Group Rule between Instance and LB 
      GroupId: !Ref WebTierSecurityGroup
      IpProtocol: tcp 
      FromPort: 80 
      ToPort: 80
      SourceSecurityGroupId: !Ref GrafanaSecurityGrp

# Outbound rule in a security group to allow TCP traffic on port 3000 (Grafana)from the security group "GrafanaSecurityGrp" to the security group "WebTierSecurityGroup". And is written seperate to eliminate problems with circular dependencies!
  OutboundRule3000:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Security Group Rule between Instance and LB 
      GroupId: !Ref WebTierSecurityGroup
      IpProtocol: tcp 
      FromPort: 3000 
      ToPort: 3000
      SourceSecurityGroupId: !Ref GrafanaSecurityGrp

  OutboundRule9090:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Security Group Rule between Instance and LB 
      GroupId: !Ref WebTierSecurityGroup
      IpProtocol: tcp 
      FromPort: 9090 
      ToPort: 9090
      SourceSecurityGroupId: !Ref GrafanaSecurityGrp

  OutboundRule9093:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Security Group Rule between Instance and LB 
      GroupId: !Ref WebTierSecurityGroup
      IpProtocol: tcp 
      FromPort: 9093 
      ToPort: 9093
      SourceSecurityGroupId: !Ref GrafanaSecurityGrp

  OutboundRule9115:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Security Group Rule between Instance and LB 
      GroupId: !Ref WebTierSecurityGroup
      IpProtocol: tcp 
      FromPort: 9115 
      ToPort: 9115
      SourceSecurityGroupId: !Ref GrafanaSecurityGrp

# Grafana SG
##############

 # Security Group for Grafana Instance Allows HTTP und SSH In and all Out
  GrafanaSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH In from LB Securtiy Group
      GroupName: GrafanaSecurityGrp
      VpcId:
        !ImportValue 
          Fn::Sub: '${VPCModule}-ID'
      SecurityGroupIngress:
        - Description: Allow SSH
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# Inbound Rule
##############

  InstanceSecurityGroupIngressHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Rule between Instance and Load Balancer HTTP 
      GroupId: !Ref GrafanaSecurityGrp
      IpProtocol: tcp 
      FromPort: 80 
      ToPort: 80
      SourceSecurityGroupId: !Ref WebTierSecurityGroup

  InstanceSecurityGroupIngress3000:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Rule between Instance and LB for Grafana
      GroupId: !Ref GrafanaSecurityGrp
      IpProtocol: tcp 
      FromPort: 3000 
      ToPort: 3000
      SourceSecurityGroupId: !Ref WebTierSecurityGroup

  InstanceSecurityGroupIngress9090:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Rule between Instance and LB for Prometheus
      GroupId: !Ref GrafanaSecurityGrp
      IpProtocol: tcp 
      FromPort: 9090 
      ToPort: 9090
      SourceSecurityGroupId: !Ref WebTierSecurityGroup

  InstanceSecurityGroupIngress9115:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Rule between Instance and LB for Alertmanager 
      GroupId: !Ref GrafanaSecurityGrp
      IpProtocol: tcp 
      FromPort: 9115 
      ToPort: 9115
      SourceSecurityGroupId: !Ref WebTierSecurityGroup

  InstanceSecurityGroupIngress9093:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Rule between Instance and LB for Alertmanager 
      GroupId: !Ref GrafanaSecurityGrp
      IpProtocol: tcp 
      FromPort: 9093 
      ToPort: 9093
      SourceSecurityGroupId: !Ref WebTierSecurityGroup

  InstanceSecurityGroupIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Rule between Instance and LB 
      GroupId: !Ref GrafanaSecurityGrp
      IpProtocol: tcp 
      FromPort: 443 
      ToPort: 443
      SourceSecurityGroupId: !Ref WebTierSecurityGroup

# Load Balancer
#######################

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !ImportValue
            Fn::Sub: '${VPCModule}-PublicSubnet1'
        - !ImportValue
            Fn::Sub: '${VPCModule}-PublicSubnet2'
      SecurityGroups:
        - !Ref WebTierSecurityGroup
      Tags:
        - Key: Name
          Value: GrafanaLoadBalancer
        - Key: StackName
          Value: !Ref AWS::StackName

# Target Groups
###############

# Target Group for Grafana
  TargetGroupLB3000:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: GrafanaTargetGroup
      Port: 3000
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      TargetType: instance
      Targets:
        - Id: !Ref GrafanaInstance
      VpcId:
        !ImportValue
          Fn::Sub: '${VPCModule}-ID'

# Target Group for Prometheus
  TargetGroupLB9090:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: PrometheusTargetGroup
      Port: 9090
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      TargetType: instance
      Targets:
        - Id: !Ref GrafanaInstance
      VpcId:
        !ImportValue
          Fn::Sub: '${VPCModule}-ID'

# Target Group for Blackbox
  TargetGroupLB9115:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: BlackboxTargetGroup
      Port: 9115
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      TargetType: instance
      Targets:
        - Id: !Ref GrafanaInstance
      VpcId:
        !ImportValue
          Fn::Sub: '${VPCModule}-ID'

# Target Group for Alertmanager
  TargetGroupLB9093:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: AlertmanagerTargetGroup
      Port: 9093
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      TargetType: instance
      Targets:
        - Id: !Ref GrafanaInstance
      VpcId:
        !ImportValue
          Fn::Sub: '${VPCModule}-ID'

# Listeners
###############

# Listener Redirect 80 -> 3000
  Listener80to3000:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '3000'
            Protocol: HTTP
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

# Listener Grafana 3000
  Listener3000:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupLB3000
      LoadBalancerArn: !Ref LoadBalancer
      Port: 3000
      Protocol: HTTP

# Listener Prometheus 9090
  Listener9090:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupLB9090
      LoadBalancerArn: !Ref LoadBalancer
      Port: 9090
      Protocol: HTTP

# Listener Alertmanager 9093
  Listener9093:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupLB9093
      LoadBalancerArn: !Ref LoadBalancer
      Port: 9093
      Protocol: HTTP

# Listener Blackbox 9115
  Listener9115:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupLB9115
      LoadBalancerArn: !Ref LoadBalancer
      Port: 9115
      Protocol: HTTP

# EFS File System 
##################

  EFSFileSystem:
      Type: AWS::EFS::FileSystem
      Properties:
          Encrypted: false
          LifecyclePolicies:
            - TransitionToIA: AFTER_30_DAYS
          PerformanceMode: generalPurpose
          ThroughputMode: bursting
          FileSystemTags: 
            - 
              Key: Environment
              Value: Monitoring
            - Key: StackName
              Value: !Ref AWS::StackName

  MountTarget1:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref EFSFileSystem
          SecurityGroups: 
            - !Ref EFSSG
          SubnetId:
            !ImportValue 
              Fn::Sub: '${VPCModule}-PrivateSubnet1'

  MountTarget2:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref EFSFileSystem
          SecurityGroups: 
            - !Ref EFSSG
          SubnetId:
            !ImportValue 
              Fn::Sub: '${VPCModule}-PrivateSubnet2'

# Ec2 Instance
###############

# Configuration for the provision of the ec2 instance
  GrafanaInstance:
    Type: AWS::EC2::Instance
    Properties: 
      # Gets the AMI ID from the Mappings section based on the region and instance type specified in the FindInMap function "Amazon"
      ImageId: !FindInMap [AMIMap, !Ref "AWS::Region", !Ref OS]
      InstanceType: !If [WantProduction, t3.medium, t3.small]
      KeyName: !Ref KeyPairName
      # Import the Subnet from the Main Stack Template by Cross Stack Reference to the instance
      SubnetId:
        !ImportValue 
          Fn::Sub: '${VPCModule}-PrivateSubnet2'
      IamInstanceProfile:
        !ImportValue 
          Fn::Sub: '${VPCModule}-DevInstanceProfile'
      # Attaches the Security Group to the instance
      SecurityGroupIds: 
        - !Ref GrafanaSecurityGrp
      Tags: 
        - Key: Name
          Value: grafana-instance
        - Key: DeployedWith
          Value: Cloudformation
    
      # Passes the UserData script to the instance: Installing Apache and PHP, and creating a PHP script to display the instance ID and availability zone
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          package_upgrade: true

          ssh_authorized_keys:
            - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtN+sKx8MaNh5gpulK9plpe1bxHtYfSlj2WOvMM8cjXzUMRxxIxxPivAohTZYsCW9OwK376GclZd17RqDfx9ifoa1rUpQnyZ1ckB4Xw5zZA+bZintl1L0OAwzTmaITXbly7913BNjkiQ9Vyy3gYwYqEKrmQPfhaWKG3oWCWhQHBE9nllYPtnIspupeEGRaS1rJL1NZH7nRE+5dQMXnIr3pRUDbX0q2WXodYtVuUVaujYCGWDTLzgrLgVWRix165pMfXXJ80wmZCz8JC/vcM7veKiKRtbeTHJSMnxCxN9MpKe/PZqLtS3WywzHkBqF2s208SC0bvfUpxrAKGzUresUWT6+EgeoBDs7IsSwFekAerckSMH0CWXdL0triE52gQK+7mWKPh6vvzONngNiwKQuOD6lnbaVuK2DrJ/Oi4aT2+eonA2ovFCP4BHTgSwc/VVh3++Fu944ZsJOV6zK50uopfCVcrjZ7vs2y15DgwrtARQkaSZVIEwVgZG7FN2n4AEkSvotpElxLNuLbmoKimQdJy96YZYcN2skkOVaaPa1zvB18cT/V5+1ctGJ1rG7jrzkoaATjt4DHEONGfNT5VjE5CYteEExmI9uzEpEuKY+jBWbtRily49ESSEZQd3aCS8svDe8jxvs9zC9N7pzh+5O9PgJsUkyHLJANOJNrWyeOYw== outside@XPS

          packages:
            - apt-transport-https
            - ca-certificates
            - curl
            - gnupg
            - lsb-release

          runcmd:
            - cd /opt
            - sudo git clone https://github.com/blro-ep/ITCNE23-SEM-I.git
            - sudo mkdir -p /etc/apt/keyrings
            - sudo curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/Debian_Unstable/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
            - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/Debian_Unstable/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
            - sudo apt-get install -y prometheus-node-exporter
            - sudo apt-get install -y containernetworking-plugins
            - sudo apt-get install -y python3-pip
            - sudo apt-get install -y podman
            - sudo pip3 install podman-compose
            - cd /opt/ITCNE23-SEM-I/monitoring/podman
            - podman-compose up -d

Outputs:
  WebsiteURLlocal:
    Value: !Sub http://${GrafanaInstance.PrivateIp}
    Description: Application URL
  
  AppUrl:
    Description: URL of the sample app.
    Value: !Sub 'http://${LoadBalancer.DNSName}'

  LoadBalancerDNS:
    Value: !GetAtt LoadBalancer.DNSName
    Description: The DNS name of the load balancer
    
  InstanceID:
    Value: !Ref GrafanaInstance
    Description: Shows you the Instance ID of the EC2
    #i-04a3cc73a1c73cf94

  SSMManager:
    Value: !Sub aws ssm start-session --target ${GrafanaInstance} --profile gmail
    Description: CMD Commend to Connect to the Linux Machine over Session Manager

# Source Session Manager : https://catalog.workshops.aws/cfn101/en-US/basics/operations/session-manager 
# Source User Data Parts : https://catalog.workshops.aws/cfn101/en-US/basics/operations/user-data 





