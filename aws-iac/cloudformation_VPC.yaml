Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets. **WARNING** This template creates AWS resources. You will be billed for the
  AWS resources used if you create a stack from this template.
   supporting resources, a basic networking structure, and some Security groups for use in later tasks.

  # Commend to Execute Example:
  # aws cloudformation create-stack --stack-name VPC-DEV03 --template-body file://cloudformation_VPC.yaml --parameters ParameterKey=EnvironmentName,ParameterValue=VPC-DEV03 ParameterKey=VpcCIDR,ParameterValue=10.2.0.0/16 ParameterKey=PublicSubnet1CIDR,ParameterValue=10.2.10.0/24 ParameterKey=PublicSubnet2CIDR,ParameterValue=10.2.11.0/24 ParameterKey=PrivateSubnet1CIDR,ParameterValue=10.2.20.0/24 ParameterKey=PrivateSubnet2CIDR,ParameterValue=10.2.21.0/24

## Defines the Parameters 
########################

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: VPC-DEV01

  # **Warning** A running NAT Gateway will have a hour running Cost and should be disabled when not needed.
  NatGateways:
    Description: 'Do you want to add Nat Gateway per private Subnet? **There are costs associated to this Resource**'
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will be used to determine if an S3 endpoint should be added to the VPC or not
  S3Endpoint:
    Description: 'Do you want to add a S3 endpoint to VPC'
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will specify if you want to enable VPC Flow Logs or not, and what traffic type to capture.
  FlowLog:
    Description: 'Do you want to Enable VPC Flow Log?'
    Type: String
    Default: reject-only
    AllowedValues: [true, reject-only, false]

  # This Parameter lets you specify how long you want to retain your flow log event
  FlowLogRetentionDays:
    Description: The number of days you want to retain flow log events
    Type: Number
    Default: 5
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150]

  # This Parameter will be used to determine if a Basic Ec2 Instance should be deployed
  SimpleEc2Instance:
    Description: 'Do you want to add a Simple EC2 Instance to your VPC'
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will be used to determine if a Basic 3 Ec2 Instance with a PHP Website and a extra EBS Volume and SSM connection should be deployed
  EnvType:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: test
    AllowedValues: [test, prod]
    ConstraintDescription: Specify either test or prod.

## Network Parameter
####################

  VpcCIDR:
    Description: Please enter the IP range for this VPC
    Type: String
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.42.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range for the public subnet in the first Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range for the public subnet in the second Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range for the private subnet in the second Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.30.0/24

  PrivateSubnet4CIDR:
    Description: Please enter the IP range for the private subnet in the second Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.31.0/24

#  Specify an optional resource or property based on the value of a parameter or another condition.
Conditions:
  # Logical ID of Condition: Intrinsic funtion (!Equals) true if the Parameter is set to true
  WantNatGateways: !Equals [!Ref NatGateways, true]

  # This Cloud Formation condition checks if the value of S3Endpoint parameter is true. If the parameter value is true, then the WantS3Endpoint condition will be true to and any resource that uses this condition will be created
  WantS3Endpoint: !Equals [!Ref S3Endpoint, true]
  
  # The Two Flow Log Conditions evaluate the condition to true if the value of the FlowLog parameter is !NOT false, and will evaluate to false otherwise.
  WantFlowLog: !Not [!Equals [!Ref FlowLog, false]]
 
  # The condition will be true if the value of the FlowLog parameter is exactly 'reject-only', and will evaluate to false otherwise.
  WantFlowLogRejectOnly: !Equals [!Ref FlowLog, 'reject-only']

  # The condition will be true if the value of the SimpleEc2Instance is True
  WantEC2: !Equals [!Ref SimpleEc2Instance, true]

  # The condition will be true if the value of the EnvType is prod / different way of writing a condition
  WantProduction: !Equals
    - !Ref EnvType
    - prod

## VPC and Network Structure
###################
Resources:

# DHCP Server 
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Sub  ${EnvironmentName}.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} stack DHCPOptions
        - Key: StackName
          Value: !Ref EnvironmentName

# VPC creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# DHCP Assosiation with VPC
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

# The AWS::EC2::InternetGateway resource creates a new internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# The AWS::EC2::VPCGatewayAttachment resource attaches the internet gateway created above to the VPC created earlier.
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Sub ${EnvironmentName} Internet Gateway
      VpcId: !Ref VPC

## Subnets
##########

# The AWS::EC2::Subnet resources create a public subnets in the default availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

# The AWS::EC2::Subnet resources create a public subnets in the fist availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1 (AZ1)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2 (AZ2)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 3 (AZ1)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 4 (AZ2)

## Nat Gateway for the private Subnet located in Public Subnet 
##############

## Nat Gateway Nested -> Giving the Parameters to the Nested Stack
  VPCNatGateways:
    Condition: WantNatGateways
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://config-bucket-931336182845.s3.eu-central-2.amazonaws.com/natgateway.yaml
      Parameters:
        Subnet1Nat: !Ref PublicSubnet1
        Subnet2Nat: !Ref PublicSubnet2
        PrivateRouteTable1Nat: !Ref PrivateRouteTable1
        PrivateRouteTable2Nat: !Ref PrivateRouteTable2


## Public Route Table AZ1 + AZ2
###############################

# creates an Amazon VPC "public route table".
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes #  the !Sub function to substitute the value of the EnvironmentName parameter into the string "Public Routes".

# creates a route to the Internet Gateway in the Public Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# creates an association between the PublicRouteTable and PublicSubnet1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# creates an association between the PublicRouteTable and PublicSubnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

## Private Route Table AZ1
##########################

# Creates a PrivateRouteTable1 for Availability Zone 1.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 1 (AZ1)

# Creates a PrivateRouteTable3 for Availability Zone 1.
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 3 (AZ1)

## Private Route Table association 
#####################

# Creates an association between the PrivateRouteTable1 and PrivateSubnet1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# Creates an association between the PrivateRouteTable3 and PrivateSubnet3
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

## Private Route Table AZ2
##########################

# Creates a PrivateRouteTable1 for Availability Zone 2.
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 2 (AZ2)

# Creates a PrivateRouteTable1 for Availability Zone 2.
  PrivateRouteTable4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 4 (AZ2)

## Private Route Table association 
#####################

# Creates an association between the PrivateRouteTable2 and PrivateSubnet2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# Creates an association between the PrivateRouteTable4 and PrivateSubnet4
  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable4
      SubnetId: !Ref PrivateSubnet4

## Security Group
#################

# Creates a Secuirty Group with no ingress rules
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

# Creates a Security Group with allow Ping ingress rules
  PingIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ping-ingress-sg"
      GroupDescription: "Security group with SSH und Ping ingress rule"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0

  # Security Group for VPC Endpoints Allows HTTPS In and all Out
  SSMEndpointsSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'security group for VPC endpoints SSM / EC2 Messages'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: 'allow inbound HTTPS from instance'
          SourceSecurityGroupId: !Ref DevInstanceSecurityGrp
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - Description: 'allow outbound HTTPS to the VPC'
          CidrIp: !Ref VpcCIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  # Security Group for Dev Instance Allows HTTP, HTTPS und SSH In and all Out
  DevInstanceSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS In and Out for remote access for Dev Instance
      GroupName: HTTPSAccess
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allow HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Security Group for EFS Mount Target to DevInstanceSecurityGrp
  EFSMountTargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group allowing traffic between EFS Mount Targets and Amazon EC2 instances
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EFSMountTargetSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref DevInstanceSecurityGrp
          FromPort: 80
          ToPort: 80

## Roles 
########

  # Creates an AWS Identity and Access Management (IAM) Role, The role is used for the Amazon EC2 Systems Manager managed instance feature, allowing you to remotely manage the configuration and connect to the instances.
  Ec2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        # allow EC2 to assume role
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # attaching a managed policy to our role
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  # AWS IAM instance profile that grants permissions to launch EC2 instances with Amazon SSM
  DevInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref Ec2SSMRole  # Role is attached to the instance profile.

## NACL Public Subnet
#####################

# creates a Network ACL List for our Public Subnets 
  PubNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Public-Tier-ACL

# 1.NACL entry to allow inbound SSH traffic to the public subnet.
  PubNACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22

# 2. NACL entry to allow inbound HTTP traffic to the public subnet.
  PubNACLInboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 3. NACL entry to allow inbound HTTPS traffic to the public subnet.
  PubNACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 4. NACL entry to allow inbound ICMP / Ping traffic to the public subnet.
  PubNACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 130
       Protocol: 1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       Icmp:
        Code: -1
        Type: 8

# 5. NACL entry to Allows Ephermeral ports inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  PubNACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 140
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 32768
         To: 65535

# create a NACL Outbound Rule for everything 
  PubNACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0   

#  creates an association between the public subnet AZ1 and the newly created network ACL.
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref PubNACL

#  creates an association between the public subnet AZ2 and the newly created network ACL.
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet2
       NetworkAclId: !Ref PubNACL

## NACL Private Subnet 1 AZ1
##########################

# creates a Network ACL List for our Private Subnet 1 in AZ1
  Private1NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private1-Tier-ACL-AZ1

# create a Outbound Rule allow all outbound
  Private1NACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0 

#  creates an association between the private subnet 1 AZ1 and the newly created network ACL.
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet1
       NetworkAclId: !Ref Private1NACL

## NACL Private Subnet 2 AZ2
##########################

# creates a Network ACL List for our Private Subnet 2 in AZ2
  Private2NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private2-Tier-NACL-AZ2

# create a Outbound Rule allow all outbound
  Private2NACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0 

#  creates an association between the private subnet 2 AZ2 and the newly created network ACL.
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet2
       NetworkAclId: !Ref Private2NACL

## NACL Private Subnet 3 AZ1
##########################

# creates a Network ACL List for our Private Subnets 3 in AZ1
  Private3NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private3-Tier-ACL-AZ1

# create a Outbound Rule allow all outbound
  Private2NACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0 

#  creates an association between the private subnet 3 AZ1 and the newly created network ACL.
  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet3
       NetworkAclId: !Ref Private3NACL

## NACL Private Subnet 4 AZ2
##########################

# creates a Network ACL List for our Private Subnets 4 in AZ2
  Private4NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private4-Tier-ACL-AZ1

# create a Outbound Rule allow all outbound
  Private4NACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0 

#  creates an association between the private subnet 4 AZ1 and the newly created network ACL.
  PrivateSubnet4NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet4
       NetworkAclId: !Ref Private4NACL

## Key Pair
###########

# First KeyPair erstellt
  NewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: MyKeyPair

## Endpoints
############

# creates an Amazon VPC endpoint for Amazon S3 in the four private subnet and the public subnet.
  VPCEndpointS3:
    # Condition: WantS3Endpoint means that the VPC endpoint is only created if the WantS3Endpoint condition is true
    Condition: WantS3Endpoint
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds: 
       - !Ref PrivateRouteTable1
       - !Ref PrivateRouteTable2
       - !Ref PrivateRouteTable3
       - !Ref PrivateRouteTable4
       - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

  # Creating an AWS VPC Endpoint Amazon Managed EC2 Messages service. which will prevent data from being exposed to the public internet.
  EC2MessagesVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  # Creating an AWS VPC Endpoint to the Amazon Managed SSM Messages service. which will prevent data from being exposed to the public internet.
  SSMMessagesVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  # Create an Amazon VPC endpoint for AWS Systems Manager , which only routes traffic within the AWS network. Subnet, security group, and VPC ID are required for this setup.
  SSMVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

## S3 Public Bucket 
###################

# S3 Public Bucket wird erstellt
  S3Bucket:
    Type: AWS::S3::Bucket
    Description: "S3 Public bucket creation"
    Properties:
      BucketName: public-bucket-dam
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  
# creates an S3 bucket policy that allows any AWS principal to perform any action on objects within the public S3 bucket 
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "*"
            Effect: Allow
            Resource: !Join [ "", [ !GetAtt S3Bucket.Arn, "/*" ]]
            Principal:
              AWS: "*"

## S3 Bucket Private -> Nested Stack 
####################

  # Nesting a stack in a template s3bucket.yaml -> Giving the Parameters to the Nested Stack
  s3BucketModule:
    Type: AWS::CloudFormation::Stack
    Properties:
        Parameters:
          s3BucketfirstName: private-bucket-dam
          ValueEnviroment: !Ref EnvironmentName
        TemplateURL: 'https://config-bucket-931336182845.s3.eu-central-2.amazonaws.com/s3bucket.yaml'

## Flow Log Nested -> Giving the Parameters to the Nested Stack
##################

  FlowLogModule:
    Condition: WantFlowLog
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://config-bucket-931336182845.s3.eu-central-2.amazonaws.com/flowlog.yaml
      Parameters:
        VPCModule: !Ref AWS::StackName
        # Using the function !If to set the value of "TrafficType" based on the value of "WantFlowLogRejectOnly".  If WantFlowLogRejectOnly is true, the function will return the string REJECT as the value . If WantFlowLogRejectOnly is false, ALL will be the value
        TrafficType: !If [WantFlowLogRejectOnly, REJECT, ALL]
        RetentionDays: !Ref FlowLogRetentionDays
        VPCID: !Ref VPC



## Simple EC2 Nested -> Giving the Parameters to the Nested Stack
####################

  VPCEc2Instance:
    Condition: WantEC2
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://config-bucket-931336182845.s3.eu-central-2.amazonaws.com/simpleec2.yaml
      Parameters:
        VPCModule: !Ref AWS::StackName
        VPCID: !Ref VPC
        MynewKeyPair: !Ref NewKeyPair
        Subnet4ec2: !Ref PublicSubnet1
        InstanceType: !If [WantProduction, t3.small, t3.micro]

        
# When the Stack is Running, check your Outputs to get a better understanding with: aws cloudformation describe-stacks --stack-name VPC-DEV01 --profile Swisscom       
Outputs:
  VPCID:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: "VPCID"
    # In My Case its vpc-0425af0359ec28474

  IPEc2InstanceID:
    Description: The Public IP Address of the Ec2 Template
    Value: !GetAtt VPCEc2Instance.Outputs.PublicIPAddress

  StackName:
    Description: The Name of the Stack we gave @ the Parameter --stack-name VPC-DEV01 
    Value: !Ref AWS::StackName
    Export:
      Name: "StackName"  
    # My Case This Value is: VPC-DEV01

  Id:
    Value: !Ref VPC
    # In my Case: vpc-0425af0359ec28474 Same as AWS::StackId
    Export:
      Name: !Sub ${AWS::StackName}-Id
    # In my Case VPC-DEV01-Id

  Region:
    Description: "Lab Region"
    Value: !Ref AWS::Region
  
  DevInstanceSecurityGrp:
    Value: !Ref DevInstanceSecurityGrp
    Export:
      Name: "DevInstanceSecurityGrp" 
    # In my Case: vpc-0425af0359ec28474 Same as AWS::StackId
    
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: "PublicSubnets"  

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: "PublicSubnet1"  

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: "PublicSubnet2"  

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: "PrivateSubnets"  

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: "PrivateSubnet1" 

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: "PrivateSubnet2" 

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  PubNACL:
    Description: A reference to the public subnet NACL for both Availability Zone
    Value: !Ref PubNACL

  Private1NACL:
    Description: A reference to the private subnet NACL in the 1st Availability Zone
    Value: !Ref Private1NACL
  
  Private2NACL:
    Description: A reference to the private subnet NACL in the 2st Availability Zone
    Value: !Ref Private2NACL

  S3Bucket:
    Description: Bucket Created using this template.
    Value: !Ref S3Bucket
    # In my Case : public-bucket-dam

  s3BucketModule:
    Description: s3BucketModule Created using this template.
    Value: !Ref s3BucketModule
    # In my Case arn:aws:cloudformation:eu-central-2:931336182845:stack/VPC-DEV01-s3BucketModule-HYUB6WYNWXO3/a3a1c680-bc4f-11ed-b29f-0a221553cce2

    # Check if the stack we created via template is completed successfully: 
    # aws cloudformation list-stack-resources --stack-name VPC-DEV03

    # Describe stack and its resources to view its properties:
    # aws cloudformation describe-stacks --stack-name VPC-DEV03
    # aws cloudformation describe-stack-resources --stack-name VPC-DEV03

    # Update the Stack:
    # aws cloudformation update-stack --stack-name VPC-DEV03 --template-body file://cloudformation_VPC.yaml --parameters ParameterKey=EnvironmentName,ParameterValue=VPC-DEV03 ParameterKey=VpcCIDR,ParameterValue=10.2.0.0/16 ParameterKey=PublicSubnet1CIDR,ParameterValue=10.2.10.0/24 ParameterKey=PublicSubnet2CIDR,ParameterValue=10.2.11.0/24 ParameterKey=PrivateSubnet1CIDR,ParameterValue=10.2.20.0/24 ParameterKey=PrivateSubnet2CIDR,ParameterValue=10.2.21.0/24

    # Delete the Stack 
    # aws cloudformation delete-stack --stack-name VPC-DEV03
    #
