Description: This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets. **WARNING** This template creates AWS resources. You will be billed for the
  AWS resources used if you create a stack from this template.
   supporting resources, a basic networking structure, and some Security groups for use in later tasks.

  # Commend to Execute Example:
  # aws cloudformation create-stack --stack-name VPC-DEV03 --template-body file://cloudformation_VPC.yaml --parameters ParameterKey=EnvironmentName,ParameterValue=VPC-DEV03 ParameterKey=VpcCIDR,ParameterValue=10.2.0.0/16 ParameterKey=PublicSubnet1CIDR,ParameterValue=10.2.10.0/24 ParameterKey=PublicSubnet2CIDR,ParameterValue=10.2.11.0/24 ParameterKey=PrivateSubnet1CIDR,ParameterValue=10.2.20.0/24 ParameterKey=PrivateSubnet2CIDR,ParameterValue=10.2.21.0/24

## Defines the Parameters 
########################

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: VPC-DEV01

  # **Warning** A running NAT Gateway will have a hour running Cost and should be disabled when not needed.
  NatGateways:
    Description: 'Do you want to add Nat Gateway per private Subnet? **There are costs associated to this Resource**'
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will be used to determine if an S3 endpoint should be added to the VPC or not
  S3Endpoint:
    Description: 'Do you want to add a S3 endpoint to VPC'
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will specify if you want to enable VPC Flow Logs or not, and what traffic type to capture.
  FlowLog:
    Description: 'Do you want to Enable VPC Flow Log?'
    Type: String
    Default: reject-only
    AllowedValues: [true, reject-only, false]

  # This Parameter lets you specify how long you want to retain your flow log event
  FlowLogRetentionDays:
    Description: The number of days you want to retain flow log events
    Type: Number
    Default: 5
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150]

  # This Parameter will specify if you want to enable VPC Flow Logs or not, and what traffic type to capture.
  s3Bucket:
    Description: 'Do you want to create a s3 Bucket?'
    Type: String
    Default: false
    AllowedValues: [true, false]

  # This Parameter will be used to determine if a Basic Ec2 Instance should be deployed
  SimpleEc2Instance:
    Description: 'Do you want to add a Simple EC2 Instance to your VPC'
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will be used to determine if a Basic 3 Ec2 Instance with a PHP Website and a extra EBS Volume and SSM connection should be deployed
  SimpleEc3Instance:
    Description: 'Do you want to add a Simple EC2 3 Instance with a PHP Website and SSM connection to your VPC'
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will be used to determine if a Basic 3 Ec2 Instance with a PHP Website and a extra EBS Volume and SSM connection should be deployed
  EnvType:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: test
    AllowedValues: [test, prod]
    ConstraintDescription: Specify either test or prod.

  KeyPairName:
    Description: >-
      Enter a Public/private key pair. If you do not have one in this AWS Region,
      create it before continuing
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: gmail

## IAM
####################

  # This Parameter will be used to specify the Monitoring Group Name
  IAM:
    Description: Specify if IAM Resources should be created.
    Type: String
    Default: true
    AllowedValues: [true, false]

  # This Parameter will be used to specify the Monitoring Group Name
  MonitoringGroup:
    Description: Specify the Monitoring User Name.
    Type: String
    Default: MonitoringGroup

  # This Parameter will be used to specify the Monitoring User Name
  MonitoringUser:
    Description: Specify the Monitoring User Name.
    Type: String
    Default: Monitoring

## Network Parameter
####################

  VpcCIDR:
    Description: Please enter the IP range for this VPC
    Type: String
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.42.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range for the public subnet in the first Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range for the public subnet in the second Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range for the private subnet in the second Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.30.0/24

  PrivateSubnet4CIDR:
    Description: Please enter the IP range for the private subnet in the second Availability Zone
    # this pattern ensures that the input string is a valid IP address range in CIDR notation, where the first three octets of the IP address are between 0 and 255, and the CIDR suffix is between 16 and 28.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.42.31.0/24

#  Specify an optional resource or property based on the value of a parameter or another condition.
Conditions:
  # If the value in IAM is true then the condition will be true and the resource will be created. If the value is false then the condition will be false and the resource will not be created.
  WantIAM: !Equals [!Ref IAM, true]

  # The condition will be true if the value of the S3Bucket parameter is true
  Wants3Bucket: !Equals [!Ref s3Bucket, true]

  # Logical ID of Condition: Intrinsic function (!Equals) true if the Parameter is set to true
  WantNatGateways: !Equals [!Ref NatGateways, true]

  # This Cloud Formation condition checks if the value of S3Endpoint parameter is true. If the parameter value is true, then the WantS3Endpoint condition will be true to and any resource that uses this condition will be created
  WantS3Endpoint: !Equals [!Ref S3Endpoint, true]
  
  # The Two Flow Log Conditions evaluate the condition to true if the value of the FlowLog parameter is !NOT false, and will evaluate to false otherwise.
  WantFlowLog: !Not [!Equals [!Ref FlowLog, false]]
 
  # The condition will be true if the value of the FlowLog parameter is exactly 'reject-only', and will evaluate to false otherwise.
  WantFlowLogRejectOnly: !Equals [!Ref FlowLog, 'reject-only']

  # The condition will be true if the value of the SimpleEc2Instance is True
  WantEC2: !Equals [!Ref SimpleEc2Instance, true]

  # The condition will be true if the value of the SimpleEc3Instance is True
  WantEC3: !Equals [!Ref SimpleEc3Instance, true]

  # The condition will be true if the value of the EnvType is prod / different way of writing a condition
  WantProduction: !Equals
    - !Ref EnvType
    - prod

## VPC and Network Structure
###################
Resources:

# DHCP Server 
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Sub  ${EnvironmentName}.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} stack DHCPOptions
        - Key: StackName
          Value: !Ref EnvironmentName

# VPC creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# DHCP Association with VPC
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

# The AWS::EC2::InternetGateway resource creates a new internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# The AWS::EC2::VPCGatewayAttachment resource attaches the internet gateway created above to the VPC created earlier.
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

## Subnets
##########

# The AWS::EC2::Subnet resources create a public subnets in the default availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

# The AWS::EC2::Subnet resources create a public subnets in the fist availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1 (AZ1)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2 (AZ2)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 3 (AZ1)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 4 (AZ2)

## Nat Gateway for the private Subnet located in Public Subnet 
##############

## Nat Gateway Nested -> Giving the Parameters to the Nested Stack
  VPCNatGateways:
    Condition: WantNatGateways
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: templates/vpc/NatGateway.yaml
      Parameters:
        Subnet1Nat: !Ref PublicSubnet1
        Subnet2Nat: !Ref PublicSubnet2
        PrivateRouteTable1Nat: !Ref PrivateRouteTable1
        PrivateRouteTable2Nat: !Ref PrivateRouteTable2


## Public Route Table AZ1 + AZ2
###############################

# creates an Amazon VPC "public route table".
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes #  the !Sub function to substitute the value of the EnvironmentName parameter into the string "Public Routes".

# creates a route to the Internet Gateway in the Public Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# creates an association between the PublicRouteTable and PublicSubnet1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# creates an association between the PublicRouteTable and PublicSubnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

## Private Route Table AZ1
##########################

# Creates a PrivateRouteTable1 for Availability Zone 1.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 1 (AZ1)

# Creates a PrivateRouteTable3 for Availability Zone 1.
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 3 (AZ1)

## Private Route Table association 
#####################

# Creates an association between the PrivateRouteTable1 and PrivateSubnet1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# Creates an association between the PrivateRouteTable3 and PrivateSubnet3
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

## Private Route Table AZ2
##########################

# Creates a PrivateRouteTable1 for Availability Zone 2.
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 2 (AZ2)

# Creates a PrivateRouteTable1 for Availability Zone 2.
  PrivateRouteTable4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 4 (AZ2)

## Private Route Table association 
#####################

# Creates an association between the PrivateRouteTable2 and PrivateSubnet2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# Creates an association between the PrivateRouteTable4 and PrivateSubnet4
  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable4
      SubnetId: !Ref PrivateSubnet4

## Security Group
#################

# Creates a Security Group with no ingress rules
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NoIngressSecurityGroup

# Creates a Security Group with allow Ping ingress rules
  PingIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ping-ingress-sg"
      GroupDescription: "Security group with SSH und Ping ingress rule"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PingIngressSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0

# Endpoint Security Group
#########################

  # Security Group for VPC Endpoints Allows HTTPS In and all Out
  SSMEndpointsSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'security group for VPC endpoints SSM / EC2 Messages'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SSMEndpointsSg
      SecurityGroupIngress:
        - Description: 'allow inbound HTTPS from the VPC'
          CidrIp: !Ref VpcCIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - Description: 'allow outbound HTTPS to the VPC'
          CidrIp: !Ref VpcCIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

# Public Tier Security Group
######################

  # Security Group for VPC Endpoints Allows HTTPS In and all Out
  PubTierSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP/HTTPS and SSH In and Out bound traffic
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PubTierSG
      SecurityGroupIngress:
        - Description: 'allow inbound HTTP from instance'
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - Description: 'allow inbound HTTPS from instance'
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - Description: 'allow Node Exporter from instance'
          FromPort: 9100
          ToPort: 9100
          IpProtocol: tcp
          CidrIp: !Ref VpcCIDR
  
  PubTierSGIngressicmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Inbound Rule between App Tier and Web Tier 
      GroupId: !Ref PubTierSG
      IpProtocol: icmp 
      FromPort: 8 
      ToPort: -1
      SourceSecurityGroupId: !Ref AppTierSG 

# App Tier Security Group
##################

  # Security Group for App Tier Allows HTTP, HTTPS und SSH In and all Out
  AppTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS, SSH and Ping In and Out bound traffic
      GroupName: ApplicationTier SG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppTierSG
      SecurityGroupIngress:
        - Description: 'allow Node Exporter from instance'
          FromPort: 9100
          ToPort: 9100
          IpProtocol: tcp
          CidrIp: !Ref VpcCIDR
    
  # creates an inbound rule to allow HTTP traffic (port 80) from PubTierSG to security group AppTierSG
  AppTierSGIngressPort80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group HTTP Inbound Rule between App Tier and Web Tier 
      GroupId: !Ref AppTierSG
      IpProtocol: tcp 
      FromPort: 80 
      ToPort: 80
      SourceSecurityGroupId: !Ref PubTierSG

  # creates an inbound rule to allow HTTPS traffic (port 443) from PubTierSG to security group AppTierSG
  AppTierSGIngressPort443:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group HTTPS Inbound Rule between App Tier and Web Tier 
      GroupId: !Ref AppTierSG
      IpProtocol: tcp 
      FromPort: 443 
      ToPort: 443
      SourceSecurityGroupId: !Ref PubTierSG

  # creates an inbound rule to allow SSH traffic (port 22) from PubTierSG to security group AppTierSG
  AppTierSGIngressPort22:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Inbound Rule between App Tier and Web Tier 
      GroupId: !Ref AppTierSG
      IpProtocol: tcp 
      FromPort: 22 
      ToPort: 22
      SourceSecurityGroupId: !Ref PubTierSG

  # creates an inbound rule to allow Ping traffic from PubTierSG to security group AppTierSG
  AppTierSGIngressicmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Inbound Rule between App Tier and Web Tier 
      GroupId: !Ref AppTierSG
      IpProtocol: icmp 
      FromPort: 8 
      ToPort: -1
      SourceSecurityGroupId: !Ref PubTierSG

 # DB Tier Security Group
 #######################

  # Security Group for Database Tier Allows SSH In and all Out
  DBTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH In and Out bound traffic from and to AppTierSG
      GroupName: Database Tier Secuirty Group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBTierSG
      SecurityGroupIngress:
        - Description: Allow SSH
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref AppTierSG
        - Description: 'allow Node Exporter from instance'
          FromPort: 9100
          ToPort: 9100
          IpProtocol: tcp
          CidrIp: !Ref VpcCIDR

  DBTierSGIngressicmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Security Group Inbound Rule between DB Tier and App Tier 
      GroupId: !Ref DBTierSG
      IpProtocol: icmp 
      FromPort: 8 
      ToPort: -1
      SourceSecurityGroupId: !Ref AppTierSG


## Roles 
########

  # Creates an AWS Identity and Access Management (IAM) Role, The role is used for the Amazon EC2 Systems Manager managed instance feature, allowing you to remotely manage the configuration and connect to the instances.
  Ec2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        # allow EC2 to assume role
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # attaching a managed policy to our role
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  # AWS IAM instance profile that grants permissions to launch EC2 instances with Amazon SSM
  DevInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref Ec2SSMRole  # Role is attached to the instance profile.

## NACL Public Subnet
#####################

# creates a Network ACL List for our Public Subnets 
  PubNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Public-Tier-ACL

# Inbound Roules
################

# Intern rules 
##############

# 1.NACL entry to allow inbound SSH traffic to the public subnet.
  PubNACLInboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet1CIDR
       PortRange:
         From: 22
         To: 22

# 1.1 NACL entry to allow inbound SSH traffic to the public subnet.
  PubNACLInboundRulePort22PrivateSubnet2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 101
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet2CIDR
       PortRange:
         From: 22
         To: 22

# 2. NACL entry to allow inbound ICMP / Ping traffic from the Private 1 Subnet.
  PubNACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 110
       Protocol: 1
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet1CIDR
       Icmp:
        Code: -1
        Type: 8

# 2.1 NACL entry to allow inbound ICMP / Ping traffic from the Private 2 Subnet.
  PubNACLInboundRuleICMPEchoPrivateSubnet2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 111
       Protocol: 1
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet2CIDR
       Icmp:
        Code: -1
        Type: 8

# 3. NACL entry to allow inbound Node Exporter traffic to the public subnet from the VPC 
  PubNACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# Internet Rules
################         

# 4. NACL entry to allow inbound HTTP traffic to the public subnet.
  PubNACLInboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 130
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 5. NACL entry to allow inbound HTTPS traffic to the public subnet.
  PubNACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 140
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 6. NACL entry to allow inbound Prometheus traffic to the public subnet.
  PubNACLInboundRulePort9090:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 150
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 9090
         To: 9090

# 7. NACL entry to allow inbound Grafana traffic to the public subnet.
  PubNACLInboundRulePort3000:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 160
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 3000
         To: 3000

# 8. NACL entry to allow inbound Blackbox traffic to the public subnet from the internet
  PubNACLInboundRulePort9115:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 170
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 9115
         To: 9115

# 9. NACL entry to allow inbound Alertmanager traffic to the public subnet from the Internet
  PubNACLInboundRulePort9093:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 180
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 9093
         To: 9093

# 10. NACL entry to Allows Ephemeral ports inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  # The RFC 6056 says that the range for ephemeral ports should be 1024–65535 
  PubNACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 200
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

# Outbound Roules
################

# Intern Rules
################

# 1.NACL entry to allow Outbound SSH traffic to the Private Subnet.
  PubNACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 100
       Protocol: 6
       Egress: true # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet1CIDR
       PortRange:
         From: 22
         To: 22

# 1.1 NACL entry to allow Outbound SSH traffic to the Private Subnet.
  PubNACLOutboundRulePort22PrivateSubnet2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 101
       Protocol: 6
       Egress: true # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet2CIDR
       PortRange:
         From: 22
         To: 22

# 2. NACL Outbound Rule to allow ICMP / Ping traffic to the private subnet 2.
  PubNACLOutboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 110
       Protocol: 1
       Egress: true # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet1CIDR
       Icmp:
        Code: -1
        Type: 8

# 2.1 NACL Outbound Rule to allow ICMP / Ping traffic to the private subnet 1.
  PubNACLOutboundRuleICMPEcho2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 111
       Protocol: 1
       Egress: true # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet2CIDR
       Icmp:
        Code: -1
        Type: 8

# 3. NACL Outbound to allow inbound Node Exporter traffic to the public subnet.
  PubNACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       Egress: true # Egress is true  means it is a outbound rules
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# Extern Rules
################

# 4. NACL Outbound Rule to allow HTTP traffic to everywhere
  PubNACLOutboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 130
       Protocol: 6
       Egress: true # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 5. NACL Outbound Rule to allow HTTPS traffic to everywhere
  PubNACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 140
       Protocol: 6
       Egress: true # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 6. NACL Outbound to allow outbound Prometheus traffic to the public subnet.
  PubNACLOutboundRulePort9090:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 150
       Protocol: 6
       RuleAction: allow
       Egress: true # Egress is true  means it is a outbound rules
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 9090
         To: 9090

# 7. NACL Outbound to allow outbound Grafana traffic to the internet
  PubNACLOutboundRulePort3000:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 160
       Protocol: 6
       RuleAction: allow
       Egress: true # Egress is true  means it is a outbound rules
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 3000
         To: 3000

# 8. NACL Outbound to allow outbound Blackbox traffic to the public subnet to the internet
  PubNACLOutboundRulePort9115:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 170
       Protocol: 6
       RuleAction: allow
       Egress: true # Egress is true  means it is a outbound rules
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 9115
         To: 9115

# 9. NACL Outbound to allow outbound Alertmanager traffic to the public subnet from the Internet
  PubNACLOutboundRulePort9093:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 180
       Protocol: 6
       RuleAction: allow
       Egress: true # Egress is true  means it is a outbound rules
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 9093
         To: 9093

# 10. NACL a Outbound Rule SMTP traffic to the Internet
  PubNACLOutboundRulePortPort587:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 190
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 587
         To: 587

# 11. NACL Outbound Rule to allow Ephemeral ports return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  PubNACLOutboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 200
       Protocol: 6
       RuleAction: allow
       Egress: true # Egress is true  means it is a outbound rules
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

#  creates an association between the public subnet AZ1 and the newly created network ACL.
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref PubNACL

#  creates an association between the public subnet AZ2 and the newly created network ACL.
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet2
       NetworkAclId: !Ref PubNACL

## NACL Private Subnet 1 AZ1
##########################

# creates a Network ACL List for our Private Subnet 1 in AZ1
  Private1NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private1-Tier-ACL-AZ1

# Inbound Roules
################

# Intern rules
##############

# 1. NACL entry to allow inbound HTTP traffic to the private subnet from the public subnet.
  Private1NACLInboundRule80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet1CIDR
       PortRange:
         From: 80
         To: 80

# 2. NACL entry to allow inbound SSH traffic to the private subnet from the public subnet.
  Private1NACLInboundRule22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet1CIDR
       PortRange:
         From: 22
         To: 22

# 3. NACL entry to allow inbound ICMP / Ping traffic from the Public Subnet.
  Private1NACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 120
       Protocol: 1
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet1CIDR
       Icmp:
        Code: -1
        Type: 8

# 4. NACL entry to allow inbound Node Exporter traffic to the public subnet.
  Private1NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 130
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# Internet Rules
################

# 5. NACL entry to allow inbound HTTP traffic 
  Private1NACLInboundRulePort80public:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 140
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 6. NACL entry to allow inbound HTTPS traffic
  Private1NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 150
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 7. NACL entry to Allows Ephemeral ports inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  Private1NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 200
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

# Outbound Roules
################

# Intern Rules
################

# 1. NACL a Outbound Rule SSH traffic to the private subnet
  Private1NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 110
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet1CIDR
       PortRange:
         From: 22
         To: 22

# 2. NACL entry to allow outbound Node Exporter traffic to the public subnet.
  Private1NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 120
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# 3. NACL entry to allow inbound ICMP / Ping traffic from the Public Subnet.
  Private1NACLOutboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 130
       Protocol: 1
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet1CIDR
       Icmp:
        Code: -1
        Type: 8

# Internet Facing
#################

# 4. NACL a Outbound Rule HTTP traffic to the private subnet
  Private1NACLOutboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 140
       Protocol: 6
       Egress: true  # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 5. NACL a Outbound Rule HTTPS traffic to the private subnet
  Private1NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 150
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 6. NACL a Outbound Rule SMTP traffic to the Internet
  Private1NACLOutboundRulePort587:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 160
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 587
         To: 587

# 7. NACL a Outbound Rule to Allows Ephemeral ports the private subnet
  Private1NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 200
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

#  creates an association between the private subnet 1 AZ1 and the newly created network ACL.
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet1
       NetworkAclId: !Ref Private1NACL

## NACL Private Subnet 2 AZ2
##########################

# creates a Network ACL List for our Private Subnet 2 in AZ2
  Private2NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private2-Tier-NACL-AZ2

# Inbound Roules
################

# Intern Rules
################

# 1. NACL entry to allow inbound HTTPS traffic to the public subnet.
  Private2ACLInboundRulePort20:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet2CIDR
       PortRange:
         From: 22
         To: 22

# 2. NACL entry to allow inbound Node Exporter traffic to the public subnet.
  Private2NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# 3. NACL entry to allow inbound ICMP / Ping traffic from the Public Subnet.
  Private2NACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 130
       Protocol: 1
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet2CIDR
       Icmp:
        Code: -1
        Type: 8

# Internet Rules
################

# 4. NACL entry to allow inbound HTTP traffic 
  Private2NACLInboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 140
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 5. NACL entry to allow inbound HTTPS traffic
  Private2NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 150
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 7. NACL entry to Allows Ephemeral ports inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  Private2NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 200
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

# Outbound Roules
################

# Intern Rules
###############

# 1. NACL a Outbound Rule SSH traffic to the private subnet
  Private2NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 110
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet2CIDR
       PortRange:
         From: 22
         To: 22

# 2. NACL entry to allow outbound Node Exporter traffic to the public subnet.
  Private2NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 120
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# 3. NACL entry to allow inbound ICMP / Ping traffic from the Public Subnet.
  Private2NACLOutboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 130
       Protocol: 1
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet2CIDR
       Icmp:
        Code: -1
        Type: 8

# Internet Facing
#################


# 4. NACL a Outbound Rule HTTP traffic to the internet
  Private2NACLOutboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 140
       Protocol: 6
       Egress: true  # Egress is true  means it is a outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 5. NACL a Outbound Rule HTTPS traffic to allow it out of the private subnet
  Private2NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 150
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 6. NACL a Outbound Rule SMTP traffic to the Internet
  Private2NACLOutboundRulePort587:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 160
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 587
         To: 587

# 6. NACL a Outbound Rule to Allows Ephemeral ports out of the private subnet
  Private2NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 200
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

#  creates an association between the private subnet 2 AZ2 and the newly created network ACL.
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet2
       NetworkAclId: !Ref Private2NACL

## NACL Private Subnet 3 AZ1
##########################

# creates a Network ACL List for our Private Subnets 3 in AZ1
  Private3NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private3-Tier-ACL-AZ1

# Inbound Roules
################

# 1. NACL entry to allow inbound HTTPS traffic
  Private3NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 2. NACL entry to Allows Ephemeral ports inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  Private3NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

# 3. NACL entry to allow inbound SSH traffic from the public subnet.
  Private3ACLInboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet1CIDR
       PortRange:
         From: 22
         To: 22

# 4. NACL entry to allow inbound Node Exporter traffic to the public subnet.
  Private3NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 150
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# Outbound Rules
################

# 1. NACL a Outbound Rule HTTPS traffic
  Private3NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 100
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 2. NACL a Outbound Rule to Allows Ephemeral ports to the private subnet
  Private3NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 110
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

# 3. NACL a Outbound Rule SSH traffic to the private subnet
  Private3NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 120
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet1CIDR
       PortRange:
         From: 22
         To: 22

# 4. NACL entry to allow inbound Node Exporter traffic to the public subnet.
  Private3NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private3NACL
       RuleNumber: 130
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

#  creates an association between the private subnet 3 AZ1 and the newly created network ACL.
  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet3
       NetworkAclId: !Ref Private3NACL

## NACL Private Subnet 4 AZ2
##########################

# creates a Network ACL List for our Private Subnets 4 in AZ2
  Private4NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private4-Tier-ACL-AZ1

# Inbound Roules
################

# 1. NACL entry to allow inbound HTTPS traffic
  Private4NACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 2. NACL entry to Allows Ephemeral ports inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  Private4NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

# 3. NACL entry to allow inbound SSH traffic from the public subnet.
  Private4ACLInboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PrivateSubnet2CIDR
       PortRange:
         From: 22
         To: 22

# 4. NACL entry to allow inbound Node Exporter traffic to the public subnet.
  Private4NACLInboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 130
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

# Outbound Rules
################

# 1. NACL a Outbound Rule HTTPS traffic
  Private4NACLOutboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 100
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 2. NACL a Outbound Rule to Allows Ephemeral ports to the private subnet
  Private4NACLOutboundRulePortEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 110
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

# 3. NACL a Outbound Rule SSH traffic to the private subnet
  Private4NACLOutboundRulePort22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 120
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref PublicSubnet2CIDR
       PortRange:
         From: 22
         To: 22

# 4. NACL entry to allow inbound Node Exporter traffic to the public subnet.
  Private4NACLOutboundRulePort9100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private4NACL
       RuleNumber: 130
       Protocol: 6
       Egress: true  # Egress is true for outbound rules
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
       PortRange:
         From: 9100
         To: 9100

#  creates an association between the private subnet 4 AZ1 and the newly created network ACL.
  PrivateSubnet4NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet4
       NetworkAclId: !Ref Private4NACL

## Key Pair
###########

# First KeyPair
  NewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: MyKeyPair

## Endpoints
############

# creates an Amazon VPC endpoint for Amazon S3 in the four private subnet and the public subnet.
  VPCEndpointS3:
    # Condition: WantS3Endpoint means that the VPC endpoint is only created if the WantS3Endpoint condition is true
    Condition: WantS3Endpoint
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds: 
       - !Ref PrivateRouteTable1
       - !Ref PrivateRouteTable2
       - !Ref PrivateRouteTable3
       - !Ref PrivateRouteTable4
       - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

  # Creating an AWS VPC Endpoint Amazon Managed EC2 Messages service. which will prevent data from being exposed to the public internet.
  EC2MessagesVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  # Creating an AWS VPC Endpoint to the Amazon Managed SSM Messages service. which will prevent data from being exposed to the public internet.
  SSMMessagesVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  # Create an Amazon VPC endpoint for AWS Systems Manager , which only routes traffic within the AWS network. 
  SSMVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointsSg
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

## S3 Public Bucket 
###################

# S3 Public Bucket created with a bucket policy
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: public-bucket-dam
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  
# S3 bucket policy that allows any AWS principal to perform get Object and the root user to perform get and put object
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 
            - "s3:GetObject"
            - "s3:PutObject"
            Effect: Allow
            Resource: !Join [ "", [ !GetAtt S3Bucket.Arn, "/*" ]]
            Principal: 
               AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join [ "", [ !GetAtt S3Bucket.Arn, "/*" ]]

## S3 Bucket Private -> Nested Stack 
####################

  # Nesting a stack in a template s3bucket.yaml -> Giving the Parameters to the Nested Stack
  s3BucketModule:
    Type: AWS::CloudFormation::Stack
    Condition: Wants3Bucket
    DependsOn: IAMUsers
    Properties:
        Parameters:
          s3BucketfirstName: dam-private-bucket-fwakjjhjjh
          ValueEnvironment: !Ref EnvironmentName
        TemplateURL: templates/s3/s3bucket.yaml

## Flow Log Nested -> Giving the Parameters to the Nested Stack
##################

  FlowLogModule:
    Condition: WantFlowLog
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: templates/vpc/flowLog.yaml 
      Parameters:
        VPCModule: !Ref AWS::StackName
        # Using the function !If to set the value of "TrafficType" based on the value of "WantFlowLogRejectOnly".  If WantFlowLogRejectOnly is true, the function will return the string REJECT as the value . If WantFlowLogRejectOnly is false, ALL will be the value
        TrafficType: !If [WantFlowLogRejectOnly, REJECT, ALL]
        RetentionDays: !Ref FlowLogRetentionDays
        VPCID: !Ref VPC



## Simple EC2 Nested -> Giving the Parameters to the Nested Stack
####################

  VPCBASICInstance:
    Condition: WantEC2
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: templates/ec2/basic-instance.yaml 
      Parameters:
        VPCModule: !Ref AWS::StackName
        VPCID: !Ref VPC
        MyNewKeyPair: !Ref KeyPairName
        Subnet4ec2: !Ref PrivateSubnet2
        # We use the intrinsic function !If to set the value of "InstanceType" based on the value of "WantProduction".  If WantProduction is true, the function will return the string t3.small as the value . If WantProduction is false 
        InstanceType: !If [WantProduction, t3.small, t3.micro]
        DevInstanceProfile: !Ref DevInstanceProfile
        # We will get the AvailabilityZone from the PublicSubnet1 AZ location
        AvailabilityZone: !GetAtt PrivateSubnet2.AvailabilityZone
        SecurityGroup: !Ref AppTierSG

## Simple 3 EC2 Nested -> Giving the Parameters to the Nested Stack
######################

  VPCDEVInstance:
    Condition: WantEC3
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: templates/ec3/dev-instance.yaml 
      Parameters:
        VPCModule: !Ref AWS::StackName
        VPCID: !Ref VPC
        MyNewKeyPair: !Ref KeyPairName
        Subnet4ec2: !Ref PublicSubnet2
        # We use the intrinsic function !If to set the value of "InstanceType" based on the value of "WantProduction".  If WantProduction is true, the function will return the string t3.medium as the value . If WantProduction is false, t3.small will be the value
        InstanceType: !If [WantProduction, t3.medium, t3.small]
        DevInstanceProfile: !Ref DevInstanceProfile
        DevInstanceSecurityGrp: !Ref PubTierSG
        IPEc2Instance: !GetAtt VPCBASICInstance.Outputs.PrivateIpAddress
        DevInstanceID: !GetAtt VPCBASICInstance.Outputs.InstanceID
        # We will get the AvailabilityZone from the PublicSubnet2 AZ location
        AvailabilityZone: !GetAtt PublicSubnet2.AvailabilityZone

## IAM User Nested -> Giving the Parameters to the Nested Stack
######################

  IAMUsers:
    Type: AWS::CloudFormation::Stack
    DependsOn: IAMMonitoringGroup
    Condition: WantIAM
    Properties:
      TemplateURL: templates/iam/user.yaml 
      Parameters:
        UserName: !Ref MonitoringUser
        UserPassword: ABc123456789$
        Groups: !Ref MonitoringGroup
        TagValue: !Sub  ${EnvironmentName}-Monitoring-User

## IAM Monitoring Group Nested -> Giving the Parameters to the Nested Stack
######################

  IAMMonitoringGroup:
    Type: AWS::CloudFormation::Stack
    Condition: WantIAM
    Properties:
      TemplateURL: templates/iam/group.yaml 
      Parameters:
        GroupName: !Ref MonitoringGroup    

# When the Stack is Running, check your Outputs to get a better understanding with: aws cloudformation describe-stacks --stack-name VPC-DEV01 --profile gmail       
Outputs:
  VPCID:
    Description: A reference to the created VPC
    Value: !Ref VPC
    # In My Case its vpc-0425af0359ec28474
    Export:
      Name: !Sub ${AWS::StackName}-ID
      # My Case This Value is: VPC-DEV01-ID
  
  VPCID2:
    Description: A reference to the created VPC
    Value: !Ref VPC
    # In My Case its vpc-0425af0359ec28474
    Export:
      Name: VPC2ID

  StackName:
    Description: The Name of the Stack we gave @ the Parameter --stack-name VPC-DEV01 
    Value: !Ref AWS::StackName
    Export:
      Name: "StackName"  
    # My Case This Value is: VPC-DEV01

  Region:
    Description: "Lab Region"
    Value: !Ref AWS::Region
  
  DevInstanceSecurityGrp:
    Value: !Ref AppTierSG
    Export:
      Name: !Sub ${AWS::StackName}-AppTierSG

  VpcCIDR:
    Description: A reference to the VPC CIDR
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub ${AWS::StackName}-VpcCIDR

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnets  

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1  

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PublicSubnet2AZ:
    Description: A reference to the public subnet2 Availability Zone
    Value: !GetAtt PublicSubnet2.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZofPublicSubnet2

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3, !Ref PrivateSubnet4 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnets  

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Description: A reference to the DB private subnet in the 1nd Availability Zone
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3
  
  PrivateSubnet4:
    Description: A reference to the private DB subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet4
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4

  PubNACL:
    Description: A reference to the public subnet NACL for both Availability Zone
    Value: !Ref PubNACL

  Private1NACL:
    Description: A reference to the private subnet NACL in the 1st Availability Zone
    Value: !Ref Private1NACL
  
  Private2NACL:
    Description: A reference to the private subnet NACL in the 2st Availability Zone
    Value: !Ref Private2NACL

  NoIngressSecurityGroupID:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  DevInstanceProfile:
    Description: Security group with no ingress rule
    Value: !Ref DevInstanceProfile
    Export:
      Name: !Sub ${AWS::StackName}-DevInstanceProfile

  IPEc2InstanceID:
    Condition: WantEC2
    Description: The Public IP Address of the Ec2 Template
    Value: !GetAtt VPCBASICInstance.Outputs.PrivateIpAddress

  S3Bucket:
    Description: Bucket Created using this template.
    Value: !Ref S3Bucket
    # In my Case : public-bucket-dam

  #s3BucketModule:
  #  Description: s3BucketModule Created using this template.
  #  Value: !Ref s3BucketModule
    # In my Case arn:aws:cloudformation:eu-central-2:931336182845:stack/VPC-DEV01-s3BucketModule-HYUB6WYNWXO3/a3a1c680-bc4f-11ed-b29f-0a221553cce2




    # Check if the stack we created via template is completed successfully: 
    # aws cloudformation list-stack-resources --stack-name VPC-DEV03

    # Describe stack and its resources to view its properties:
    # aws cloudformation describe-stacks --stack-name VPC-DEV03
    # aws cloudformation describe-stack-resources --stack-name VPC-DEV03

    # Update the Stack:
    # aws cloudformation update-stack --stack-name VPC-DEV03 --template-body file://cloudformation_VPC.yaml --parameters ParameterKey=EnvironmentName,ParameterValue=VPC-DEV03 ParameterKey=VpcCIDR,ParameterValue=10.2.0.0/16 ParameterKey=PublicSubnet1CIDR,ParameterValue=10.2.10.0/24 ParameterKey=PublicSubnet2CIDR,ParameterValue=10.2.11.0/24 ParameterKey=PrivateSubnet1CIDR,ParameterValue=10.2.20.0/24 ParameterKey=PrivateSubnet2CIDR,ParameterValue=10.2.21.0/24

    # Delete the Stack 
    # aws cloudformation delete-stack --stack-name VPC-DEV03
    #
