Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.
  
  # Quelle : https://docs.aws.amazon.com/codebuild/latest/userguide/cloudformation-vpc-template.html
  # Commend to Execute Example:
  # aws cloudformation create-stack --stack-name VPC-DEV03 --template-body file://cloudformation_VPC.yaml --parameters ParameterKey=EnvironmentName,ParameterValue=VPC-DEV03 ParameterKey=VpcCIDR,ParameterValue=10.2.0.0/16 ParameterKey=PublicSubnet1CIDR,ParameterValue=10.2.10.0/24 ParameterKey=PublicSubnet2CIDR,ParameterValue=10.2.11.0/24 ParameterKey=PrivateSubnet1CIDR,ParameterValue=10.2.20.0/24 ParameterKey=PrivateSubnet2CIDR,ParameterValue=10.2.21.0/24

# Defines the Parameters you can change
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

# The AWS::EC2::VPC resource creates a new Amazon VPC with the specified CIDR block and enable DNS settings. Taking the VPC Name from the EnvironmentName Parameter
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# The AWS::EC2::InternetGateway resource creates a new internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# The AWS::EC2::VPCGatewayAttachment resource attaches the internet gateway created above to the VPC created earlier.
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# The AWS::EC2::Subnet resources create a public subnets in the default availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

# The AWS::EC2::Subnet resources create a public subnets in the fist availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

# The AWS::EC2::EIP resources create Elastic IP addresses that can be associated with the NAT gateways.
# The DependsOn attribute in the NAT gateway resources specifies that the Elastic IP addresses must be created before the NAT gateways are created.
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

# The AWS::EC2::EIP resources create a second Elastic IP addresses that can be associated with the NAT gateways.
# The DependsOn attribute in the NAT gateway resources specifies that the Elastic IP addresses must be created before the NAT gateways are created.
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

# The AWS::EC2::NatGateway resources create NAT gateways that provide internet access to resources in the private subnets, places it in the Public Subnet and attaches the EIP to it.
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

# The AWS::EC2::NatGateway resources create NAT gateways that provide internet access to resources in the private subnets, places it in the Public Subnet and attaches the EIP to it.
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

# creates an Amazon VPC "public route table". The AWS::EC2::RouteTable resource type is used to define the properties of the route table.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC   # The VpcId property specifies the ID of the VPC that the route table belongs to, which is defined as a parameter in the CloudFormation template with the !Ref function.
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes #  the !Sub function to substitute the value of the EnvironmentName parameter into the string "Public Routes".

# creates a default "public route" in the specified route table to allow traffic to flow from the VPC to the internet.
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# creates an association between the PublicRouteTable and PublicSubnet1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# creates an association between the PublicRouteTable and PublicSubnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Creates a private route table for Availability Zone 1.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

# creates a "private route" in the specified route table to allow traffic to flow from the VPC to the NAT Gateway.
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

# creates an association between the PrivatRouteTable and PrivateSubnet1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# Creates a private route table for Availability Zone 2.
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

# creates a "private route" in the specified route table to allow traffic to flow from the VPC to the NAT Gateway.
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

# creates an association between the PrivatRouteTable and PrivateSubnet2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
# creates a Secuirty Group wiht no ingress rules
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

# creates a Network ACL List for our VPC
  Pub1NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Public-Tier-ACL-AZ1

# Creates a network ACL entry to allow inbound SSH traffic to the public subnet.
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Pub1NACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22

# create a Outbound Rule for everything 
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Pub1NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0   

#  creates an association between the public subnet AZ1 and the newly created network ACL.
  mySubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref Pub1NACL

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

    # Check if the stack we created via template is completed successfully: 
    # aws cloudformation list-stack-resources --stack-name VPC-DEV03

    # Describe stack and its resources to view its properties:
    # aws cloudformation describe-stacks --stack-name VPC-DEV03
    # aws cloudformation describe-stack-resources --stack-name VPC-DEV03

    # Update the Stack:
    # aws cloudformation update-stack --stack-name VPC-DEV03 --template-body file://cloudformation_VPC.yaml --parameters ParameterKey=EnvironmentName,ParameterValue=VPC-DEV03 ParameterKey=VpcCIDR,ParameterValue=10.2.0.0/16 ParameterKey=PublicSubnet1CIDR,ParameterValue=10.2.10.0/24 ParameterKey=PublicSubnet2CIDR,ParameterValue=10.2.11.0/24 ParameterKey=PrivateSubnet1CIDR,ParameterValue=10.2.20.0/24 ParameterKey=PrivateSubnet2CIDR,ParameterValue=10.2.21.0/24

    # Delete the Stack 
    # aws cloudformation delete-stack --stack-name VPC-DEV03
    #
