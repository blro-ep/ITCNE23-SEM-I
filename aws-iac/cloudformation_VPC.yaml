Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets. **WARNING** This template creates AWS resources. You will be billed for the
  AWS resources used if you create a stack from this template.
   supporting resources, a basic networking structure, and some Security groups for use in later tasks.

  # Commend to Execute Example:
  # aws cloudformation create-stack --stack-name VPC-DEV03 --template-body file://cloudformation_VPC.yaml --parameters ParameterKey=EnvironmentName,ParameterValue=VPC-DEV03 ParameterKey=VpcCIDR,ParameterValue=10.2.0.0/16 ParameterKey=PublicSubnet1CIDR,ParameterValue=10.2.10.0/24 ParameterKey=PublicSubnet2CIDR,ParameterValue=10.2.11.0/24 ParameterKey=PrivateSubnet1CIDR,ParameterValue=10.2.20.0/24 ParameterKey=PrivateSubnet2CIDR,ParameterValue=10.2.21.0/24

## Defines the Parameters 
########################

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: VPC-DEV01

  # **Warning** A running NAT Gateway will have a hour running Cost and should be disabled when not needed.
  NatGateways:
    Description: 'Do you want to add Nat Gateway per private Subnet? **There are costs associated to this Resource**'
    Type: String
    Default: true
    AllowedValues: [true, false]
    
#  Specify an optional resource or property based on the value of a parameter or another condition.
Conditions:
  # Logical ID of Condition: Intrinsic funtion (!Equals) true if the Parameter is set to true
  WantNatGateways: !Equals [!Ref NatGateways, true]

## VPC and Network Structure
###################
Resources:

# DHCP Server 
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Sub  ${EnvironmentName}.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} stack DHCPOptions
        - Key: StackName
          Value: !Ref EnvironmentName

# VPC creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# DHCP Assosiation with VPC
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

# The AWS::EC2::InternetGateway resource creates a new internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# The AWS::EC2::VPCGatewayAttachment resource attaches the internet gateway created above to the VPC created earlier.
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Sub ${EnvironmentName} Internet Gateway
      VpcId: !Ref VPC

## Subnets
##########

# The AWS::EC2::Subnet resources create a public subnets in the default availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

# The AWS::EC2::Subnet resources create a public subnets in the fist availability Zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1 (AZ1)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2 (AZ2)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 3 (AZ1)

# The AWS::EC2::Subnet resources create a private subnets in the default availability zone within the VPC. And attaches the Cidr Parameter we gave to it.
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 4 (AZ2)

## Nat Gateway for the private Subnet located in Public Subnet 
##############

## Nat Gateway Nested -> Giving the Parameters to the Nested Stack
  VPCNatGateways:
    Condition: WantNatGateways
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://config-bucket-931336182845.s3.eu-central-2.amazonaws.com/natgateway.yaml
      Parameters:
        Subnet1Nat: !Ref PublicSubnet1
        Subnet2Nat: !Ref PublicSubnet2
        PrivateRouteTable1Nat: !Ref PrivateRouteTable1
        PrivateRouteTable2Nat: !Ref PrivateRouteTable2


## Public Route Table AZ1 + AZ2
###############################

# creates an Amazon VPC "public route table".
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes #  the !Sub function to substitute the value of the EnvironmentName parameter into the string "Public Routes".

# creates a route to the Internet Gateway in the Public Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# creates an association between the PublicRouteTable and PublicSubnet1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# creates an association between the PublicRouteTable and PublicSubnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

## Private Route Table AZ1
##########################

# Creates a PrivateRouteTable1 for Availability Zone 1.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 1 (AZ1)

# Creates a PrivateRouteTable3 for Availability Zone 1.
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 3 (AZ1)

## Private Route Table association 
#####################

# Creates an association between the PrivateRouteTable1 and PrivateSubnet1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

# Creates an association between the PrivateRouteTable3 and PrivateSubnet3
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

## Private Route Table AZ2
##########################

# Creates a PrivateRouteTable1 for Availability Zone 2.
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 2 (AZ2)

# Creates a PrivateRouteTable1 for Availability Zone 2.
  PrivateRouteTable4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route 4 (AZ2)

## Private Route Table association 
#####################

# Creates an association between the PrivateRouteTable2 and PrivateSubnet2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# Creates an association between the PrivateRouteTable4 and PrivateSubnet4
  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable4
      SubnetId: !Ref PrivateSubnet4

## Security Group
#################

# Creates a Secuirty Group with no ingress rules
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

# Creates a Security Group with allow Ping ingress rules
  PingIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ping-ingress-sg"
      GroupDescription: "Security group with SSH und Ping ingress rule"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0

  # Security Group for VPC Endpoints Allows HTTPS In and all Out
  SSMEndpointsSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'security group for VPC endpoints SSM / EC2 Messages'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: 'allow inbound HTTPS from instance'
          SourceSecurityGroupId: !Ref DevInstanceSecurityGrp
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - Description: 'allow outbound HTTPS to the VPC'
          CidrIp: !Ref VpcCIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  # Security Group for Dev Instance Allows HTTP, HTTPS und SSH In and all Out
  DevInstanceSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS In and Out for remote access for Dev Instance
      GroupName: HTTPSAccess
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allow HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Security Group for EFS Mount Target to DevInstanceSecurityGrp
  EFSMountTargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group allowing traffic between EFS Mount Targets and Amazon EC2 instances
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EFSMountTargetSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref DevInstanceSecurityGrp
          FromPort: 80
          ToPort: 80

## Roles 
########

  # Creates an AWS Identity and Access Management (IAM) Role, The role is used for the Amazon EC2 Systems Manager managed instance feature, allowing you to remotely manage the configuration and connect to the instances.
  Ec2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        # allow EC2 to assume role
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # attaching a managed policy to our role
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  # AWS IAM instance profile that grants permissions to launch EC2 instances with Amazon SSM
  DevInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref Ec2SSMRole  # Role is attached to the instance profile.

## NACL Public Subnet
#####################

# creates a Network ACL List for our Public Subnets 
  PubNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Public-Tier-ACL

# 1.NACL entry to allow inbound SSH traffic to the public subnet.
  PubNACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22

# 2. NACL entry to allow inbound HTTP traffic to the public subnet.
  PubNACLInboundRulePort80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

# 3. NACL entry to allow inbound HTTPS traffic to the public subnet.
  PubNACLInboundRulePort443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

# 4. NACL entry to allow inbound ICMP / Ping traffic to the public subnet.
  PubNACLInboundRuleICMPEcho:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 130
       Protocol: 1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       Icmp:
        Code: -1
        Type: 8

# 5. NACL entry to Allows Ephermeral ports inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet), see Ephemeral ports.
  PubNACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 140
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 32768
         To: 65535

# create a NACL Outbound Rule for everything 
  PubNACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PubNACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0   

#  creates an association between the public subnet AZ1 and the newly created network ACL.
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref PubNACL

#  creates an association between the public subnet AZ2 and the newly created network ACL.
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet2
       NetworkAclId: !Ref PubNACL

## NACL Private Subnet 1 AZ1
##########################

# creates a Network ACL List for our Private Subnet 1 in AZ1
  Private1NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private1-Tier-ACL-AZ1

# create a Outbound Rule allow all outbound
  Private1NACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private1NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0 

#  creates an association between the private subnet 1 AZ1 and the newly created network ACL.
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet1
       NetworkAclId: !Ref Private1NACL

## NACL Private Subnet 2 AZ2
##########################

# creates a Network ACL List for our Private Subnet 2 in AZ2
  Private2NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: Private2-Tier-NACL-AZ2

# create a Outbound Rule allow all outbound
  Private2NACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref Private2NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0 

#  creates an association between the private subnet 2 AZ2 and the newly created network ACL.
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet2
       NetworkAclId: !Ref Private2NACL